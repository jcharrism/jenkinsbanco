BROKER SCHEMA com.bpd.core.util.parameter

/* 
 * Módulo para obtener la información de parametros de un Servicio.
 * La estructura de información esperada en el LocalEnvironment para hacer la consulta es la siguiente: LocalEnvironment.ParameterQuery
 *		<ParameterQuery>
 *			<ParameterEntry>		-- Este tag se repite por cada regla de homologación que se quiera consultar
 *				<service>codigo_servicio</service>    
 *			</ParameterEntry>
 *		<ParameterQuery>
 *
 *	La información de homologación se retorna en el LocalEnvironment en LocalEnvironment.ParameterQuery en un XML
 *	en el que cada campo contiene el indicador si se encontró o no parametros y los valores de los mismos
 *		<ParameterQuery>
 *			<ParameterEntry>		-- Este tag se repite por cada regla de homologación que se quiera consultar
 *				<service>codigo_servicio</service>    
 *				<OutputFields>
 *					<RuleField>		-- Este tag se repite por cada campo que hace parte de la regla
 *						<name_Parameter>nombreTag</name_Parameter>
 *                      <value_Parameter>valorActual</value_Parameter>
 *                      <type_Parameter>valorHomologado</type_Parameter>
 *					</RuleField>
 *				</OutputFields>
 *			</ParameterEntry>
 *		</ParameterQuery>
 */

DECLARE CacheCatalogInfo SHARED ROW; -- a shared variable that can be used by instances of a flow

CREATE COMPUTE MODULE Parameter_TC_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		DECLARE refIn REFERENCE TO InputLocalEnvironment.ParameterQuery;
		DECLARE service CHARACTER;
		
		SET OutputLocalEnvironment = InputLocalEnvironment;
		
		SET service = refIn.ParameterEntry.service;
		--Traer de la base de datos homologacion correspondiente al servicio y componente
			DECLARE component CHARACTER service;
			CacheCatalogInfoMutex: BEGIN ATOMIC -- beginning of atomic block. Processing is single threaded until the END; is reached
				IF CacheCatalogInfo.{service}.valid IS NULL THEN
					CREATE FIELD Environment.Variables TYPE Name;
					DECLARE rEnvironment REFERENCE TO Environment.Variables;
					-- Invocar SP
--					CALL getParam(service, rEnvironment.resultSet[]) IN Database.{DSN_DB}.{Schema_DB};
					CALL getParam(service, rEnvironment.resultSet[]);
					SET CacheCatalogInfo.{service}.ServiceInvocationData[] = rEnvironment.resultSet[];
					SET CacheCatalogInfo.{service}.valid = TRUE;
				END IF;
			END CacheCatalogInfoMutex;
			--Recorrer LoclaEnvironment para agregar homologados a la respuesta
			DECLARE I INTEGER 1;
--			DECLARE matriz REFERENCE TO refIn.ParameterEntry.InputFields.RuleField[1];
			DECLARE matriz REFERENCE TO CacheCatalogInfo.{service}.ServiceInvocationData[1];
--			CREATE FIELD OutputLocalEnvironment.HomologationQuery.HomologationEntry.InputFields;
--			DECLARE refOut REFERENCE TO OutputLocalEnvironment.HomologationQuery.HomologationEntry.InputFields;
			WHILE LASTMOVE(matriz) DO
--				DECLARE RuleField CHARACTER THE (SELECT ITEM F1.VALOR_HOMOLOGACION FROM CacheCatalogInfo.{service}.ServiceInvocationData[] AS F1 WHERE F1.TAG_ORIG = matriz.Tag AND F1.TAG_ORIG_VALOR = matriz.valor_Tag);
				SET OutputLocalEnvironment.ParameterQuery.ParameterEntry.OutputFields.RuleField[I].name_Parameter 	= matriz.PARAMETRO;
				SET OutputLocalEnvironment.ParameterQuery.ParameterEntry.OutputFields.RuleField[I].value_Parameter 	= matriz.VALOR_PARAMETRO;
				SET OutputLocalEnvironment.ParameterQuery.ParameterEntry.OutputFields.RuleField[I].type_Parameter 	= matriz.TIPO_PARAMETRO;
				SET I = I + 1;			
				MOVE matriz NEXTSIBLING REPEAT NAME;
			END WHILE;		 
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	CREATE PROCEDURE getParam(IN P1 CHAR)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 1
	EXTERNAL NAME "GET_PARAM";
END MODULE;
